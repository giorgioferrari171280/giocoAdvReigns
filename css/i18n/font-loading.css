/* ============== FONT LOADING STYLES (I18N) ============== */

/*
    Questo file è pensato per gestire il caricamento dei font,
    specialmente quando si supportano multiple lingue (i18n) che potrebbero
    richiedere set di caratteri diversi o font specifici.
    L'obiettivo è minimizzare il FOUT (Flash Of Unstyled Text) o FOIT (Flash Of Invisible Text).
*/

/*
    Strategia 1: Usare @font-face con `font-display`
    `font-display` controlla come un font viene visualizzato prima che sia caricato.
    - `auto`: Il browser decide (solitamente simile a `block`).
    - `block`: Breve periodo di testo invisibile, poi font di fallback. Se il font carica, switch.
    - `swap`: Usa subito il font di fallback. Quando il font custom carica, avviene lo switch (causa FOUT).
    - `fallback`: Brevissimo periodo di testo invisibile. Se il font non carica rapidamente, usa fallback per sempre.
    - `optional`: Brevissimo periodo di testo invisibile. Se il font non carica rapidamente, usa fallback e il font custom potrebbe non essere mai usato (se la connessione è lenta).

    Per i font principali dell'interfaccia, `swap` o `fallback` sono spesso buone scelte.
*/

/* Esempio di definizione @font-face (da ripetere per ogni peso/stile) */
/*
@font-face {
    font-family: 'RobotoWeb'; // Nome del font per CSS
    src: url('../../assets/fonts/roboto-regular.woff2') format('woff2'), // Percorsi ai file font
         url('../../assets/fonts/roboto-regular.woff') format('woff');
    font-weight: 400; // normal
    font-style: normal;
    font-display: swap; // Strategia di visualizzazione
}

@font-face {
    font-family: 'RobotoWeb';
    src: url('../../assets/fonts/roboto-bold.woff2') format('woff2'),
         url('../../assets/fonts/roboto-bold.woff') format('woff');
    font-weight: 700; // bold
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: 'LoraWeb'; // Font per i titoli
    src: url('../../assets/fonts/lora-regular.woff2') format('woff2'),
         url('../../assets/fonts/lora-regular.woff') format('woff');
    font-weight: 400;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: 'LoraWeb';
    src: url('../../assets/fonts/lora-bold.woff2') format('woff2'),
         url('../../assets/fonts/lora-bold.woff') format('woff');
    font-weight: 700;
    font-style: normal;
    font-display: swap;
}
*/

/*
    Assicurarsi che le variabili dei font in `css/base/variables.css`
    usino i nomi definiti qui e abbiano fallback generici sensati.
    Esempio in variables.css:
    --font-family-primary: 'RobotoWeb', 'Helvetica Neue', Arial, sans-serif;
    --font-family-secondary: 'LoraWeb', Georgia, serif;
*/


/*
    Strategia 2: Precaricamento dei Font (Preloading)
    Si può usare `<link rel="preload">` nell'HTML per i font critici.
    Questo dice al browser di scaricare il font prima possibile, senza
    bloccare il rendering.

    Esempio in index.html:
    <link rel="preload" href="assets/fonts/roboto-regular.woff2" as="font" type="font/woff2" crossorigin>
    <link rel="preload" href="assets/fonts/lora-regular.woff2" as="font" type="font/woff2" crossorigin>

    Il precaricamento è particolarmente utile per i font usati "above the fold".
*/


/*
    Strategia 3: Classi per il controllo del caricamento dei font (Font Face Observer / JS)
    Se si usa una libreria JavaScript come FontFaceObserver, si possono aggiungere classi
    al tag `<html>` o `<body>` quando i font sono stati caricati.
    Questo permette di evitare FOUT o di applicare stili solo dopo il caricamento.
*/

/* Esempio:
   Inizialmente, il body potrebbe avere stili per i font di fallback.
   Quando FontFaceObserver rileva che 'RobotoWeb' è caricato, aggiunge la classe '.fonts-loaded-roboto'.
*/
/*
html {
    // Usa font di fallback di default
    --font-family-primary-active: 'Helvetica Neue', Arial, sans-serif;
    --font-family-secondary-active: Georgia, serif;
}

html.fonts-loaded-roboto { // Aggiunta da JS quando Roboto è pronto
    --font-family-primary-active: 'RobotoWeb', 'Helvetica Neue', Arial, sans-serif;
}
html.fonts-loaded-lora { // Aggiunta da JS quando Lora è pronto
    --font-family-secondary-active: 'LoraWeb', Georgia, serif;
}

// Poi in variables.css o global.css si usano queste variabili "attive":
// body { font-family: var(--font-family-primary-active); }
// h1, h2 { font-family: var(--font-family-secondary-active); }
*/

/*
    Questo file, per ora, serve come promemoria e luogo per centralizzare
    le definizioni @font-face se si decide di ospitare i font localmente.
    Se si usano Google Fonts o altri CDN, le loro inclusioni gestiscono
    già parte di queste problematiche.

    Per i18n, è importante considerare i subset di caratteri.
    Se si supportano lingue con alfabeti molto diversi (es. latino, cirillico, greco, CJK),
    caricare un unico file font con tutti i glifi può essere pesante.
    In tal caso, si potrebbero definire @font-face separati per subset di lingue
    e caricarli condizionalmente o usare la proprietà `unicode-range` in @font-face.
*/

/* Esempio con unicode-range (per caricare solo i glifi necessari): */
/*
@font-face {
  font-family: 'UniversalSans';
  src: url('fonts/universalsans-latin.woff2') format('woff2');
  font-weight: 400;
  font-style: normal;
  font-display: swap;
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; // Range per caratteri latini comuni
}

@font-face {
  font-family: 'UniversalSans';
  src: url('fonts/universalsans-cyrillic.woff2') format('woff2');
  font-weight: 400;
  font-style: normal;
  font-display: swap;
  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116; // Range per caratteri cirillici base
}
*/

/*
    Se si usano font di sistema per alcune lingue per motivi di performance o licenza,
    assicurarsi che i fallback siano appropriati.
    Esempio:
    [lang="ja"] body { font-family: 'Noto Sans JP', sans-serif; }
    [lang="ko"] body { font-family: 'Noto Sans KR', sans-serif; }
*/

/* Per il momento, questo file rimane vuoto o con commenti,
   assumendo che i font siano gestiti tramite link CDN (es. Google Fonts)
   o che le definizioni @font-face siano poche e possano stare in global.css
   o variables.css se strettamente legate alle variabili.
   Se il progetto cresce e l'hosting locale dei font diventa necessario,
   questo è il posto giusto per le definizioni @font-face.
*/
